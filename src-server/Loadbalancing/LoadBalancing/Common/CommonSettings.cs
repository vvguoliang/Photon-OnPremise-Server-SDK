//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Configuration;
using System.Diagnostics;

namespace Photon.LoadBalancing.Common {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    public sealed partial class CommonSettings : global::System.Configuration.ApplicationSettingsBase {
        
        private static CommonSettings defaultInstance = ((CommonSettings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new CommonSettings())));
        
        public static CommonSettings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Nodes.txt")]
        public string NodesFileName {
            get {
                return ((string)(this["NodesFileName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("..\\..\\")]
        public string NodesFilePath {
            get {
                return ((string)(this["NodesFilePath"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("True")]
        public bool EnablePerformanceCounters
        {
            get
            {
                return ((bool)(this["EnablePerformanceCounters"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("0")]
        public int WebRpcHttpCallsLimit
        {
            get
            {
                return ((int)(this["WebRpcHttpCallsLimit"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("30")]
        public int WebRpcHttpQueueMaxErrors
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueMaxErrors"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("30")]
        public int WebRpcHttpQueueMaxTimeouts
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueMaxTimeouts"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("10000")]
        public int WebRpcHttpQueueRequestTimeout
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueRequestTimeout"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("10000")]
        public int WebRpcHttpQueueMaxBackoffTime
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueMaxBackoffTime"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("5000")]
        public int WebRpcHttpQueueMaxQueuedRequests
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueMaxQueuedRequests"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("50000")]
        public int WebRpcHttpQueueQueueTimeout
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueQueueTimeout"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("10000")]
        public int WebRpcHttpQueueReconnectInterval
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueReconnectInterval"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("1")]
        public int WebRpcHttpQueueMaxConcurrentRequests
        {
            get
            {
                return ((int)(this["WebRpcHttpQueueMaxConcurrentRequests"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("False")]
        public bool UseLoadPrediction
        {
            get
            {
                return ((bool)(this["UseLoadPrediction"]));
            }
        }

        [ApplicationScopedSetting]
        [DebuggerNonUserCode]
        [DefaultSettingValue("False")]
        public bool RequireSecureConnection
        {
            get
            {
                return ((bool)(this["RequireSecureConnection"]));
            }
        }

    }
}
